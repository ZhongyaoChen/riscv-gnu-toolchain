name: RISC-V GNU Toolchain Build and Test

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope: "full" for RISC-V specific testsuite, or specify a single test case (e.g., "gcc.target/riscv/rvv/vadd-1.c" or "zb*.c")'
        required: true
        default: 'full'
        type: string
      gcc_repo_url:
        description: 'GCC submodule upstream URL (e.g., https://gcc.gnu.org/git/gcc.git)'
        required: true
        default: 'https:/github/ZhongyaoChen/gcc.git'
        type: string
      gcc_commit:
        description: 'GCC submodule commit hash (e.g., a1b2c3d)'
        required: true
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      RISCV: ${{ github.workspace }}/install
      TARGET: riscv64-linux-gnu
      DISTDIR: ${{ github.workspace }}/distfiles

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Validate and Update GCC submodule
      run: |
        echo "Setting GCC submodule URL to ${{ github.event.inputs.gcc_repo_url }}"
        git submodule set-url gcc "${{ github.event.inputs.gcc_repo_url }}"
        echo "Verifying commit ${{ github.event.inputs.gcc_commit }} exists in ${{ github.event.inputs.gcc_repo_url }}"
        git ls-remote "${{ github.event.inputs.gcc_repo_url }}" "${{ github.event.inputs.gcc_commit }}" | grep "${{ github.event.inputs.gcc_commit }}" || {
          echo "Error: Commit ${{ github.event.inputs.gcc_commit }} not found in ${{ github.event.inputs.gcc_repo_url }}"
          exit 1
        }
        echo "Cleaning GCC submodule state"
        git submodule deinit -f gcc || true
        git rm --cached gcc || true
        git submodule update --init --recursive gcc
        cd gcc
        echo "Checking out GCC commit ${{ github.event.inputs.gcc_commit }}"
        git checkout "${{ github.event.inputs.gcc_commit }}" || {
          echo "Error: Failed to checkout commit ${{ github.event.inputs.gcc_commit }}"
          exit 1
        }
        git submodule update --init --recursive
        cd ..

    - name: Cache build artifacts and sources
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.RISCV }}
          ${{ env.DISTDIR }}
          ~/.ccache
        key: ${{ runner.os }}-riscv-toolchain-${{ github.event.inputs.gcc_commit }}-${{ hashFiles('configure', 'Makefile', '.gitmodules') }}
        restore-keys: ${{ runner.os }}-riscv-toolchain-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf automake autotools-dev curl python3 python3-pip python3-tomli libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev libslirp-dev python3-pyelftools
        pip3 install --user tomli pyelftools

    - name: Generate configure
      run: |
        ./autogen.sh

    - name: Configure Toolchain
      run: |
        mkdir -p ${{ env.RISCV }} ${{ env.DISTDIR }}
        ./configure --prefix=${{ env.RISCV }} --with-arch=rv64gcv --with-abi=lp64d --enable-qemu-system --enable-languages=c

    - name: Build Toolchain
      run: |
        make linux -j$(nproc)
        make build-sim SIM=qemu -j$(nproc)

    - name: Install Toolchain
      run: |
        make install

    - name: Run Testsuite
      env:
        PATH: ${{ env.RISCV }}/bin:$PATH
      run: |
        if [ "${{ github.event.inputs.test_scope }}" = "full" ]; then
          RUNTESTFLAGS="riscv.exp" make report-linux SIM=qemu -j$(nproc)
        else
          RUNTESTFLAGS="riscv.exp=${{ github.event.inputs.test_scope }} --target_board=riscv-sim/-march=rv64gcv/-mabi=lp64d" make report-linux SIM=qemu
        fi

    - name: Upload Toolchain Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: riscv64-toolchain
        path: ${{ env.RISCV }}
        retention-days: 7
